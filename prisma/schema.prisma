generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma-client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  externalUserId String @id
  email          String @unique
  phoneNumber    String @unique

  // Email Reminders
  sendUpcomingReminder Boolean @default(true)
  sendDailyDigest      Boolean @default(true)
  sendWeeklyReport     Boolean @default(true)

  // User can set multiple reminders
  reminder Reminder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum REMINDER_STATUS {
  UPCOMING
  PENDING
  COMPLETED
}

enum PROBLEM_DIFFICULTY {
  EASY
  MEDIUM
  HARD
}

model Reminder {
  id String @id @default(cuid())

  // FALSE if user hasn't marked notification as read.
  // TRUE if user has marked notif as read
  hasRead Boolean @default(false)

  // Used to track status of reminder for analytic purposes
  reminderStatus REMINDER_STATUS @default(UPCOMING)

  // Details of the problem
  // Leetcode Link: https://leetcode.com/problems/problem-name
  problemSlug       String
  problemTitle      String
  problemDifficulty PROBLEM_DIFFICULTY @default(EASY)

  // Date when the reminder will be sent
  scheduledDate DateTime

  user   User   @relation(fields: [userId], references: [externalUserId], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, problemSlug])
  @@index([userId, problemSlug])
}

model Feedback {
  id String @id @default(cuid())

  name    String
  email   String
  subject String
  message String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
